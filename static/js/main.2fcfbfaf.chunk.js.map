{"version":3,"sources":["components/Input/Input.js","components/ToDoItem/EditMode.js","components/ToDoItem/ViewMode.js","components/ToDoItem/ToDoItem.js","components/ToDoList/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["Input","action","changeCategory","inputItem","useRef","dateItem","category","useState","today","Date","year","getFullYear","month","getMonth","day","getDate","date","setDate","onClick","inputObject","task","current","value","done","id","uuid","memo","console","log","className","onKeyDown","evt","code","type","placeholder","ref","size","htmlFor","onChange","target","min","max","EditMode","itemContent","updateItems","toggleEdit","updatedTask","setUpdatedTask","updatedCategory","setUpdatedCategory","updatedDate","setUpdatedDate","ViewMode","ToDoItem","onDelete","editState","setEditState","ToDoList","items","doneItems","setDoneItems","filteredList","filter","item","map","index","App","setItems","setCategory","newCategory","useEffect","getLocalItems","localStorage","setItem","JSON","stringify","addNewItem","newItem","newItemList","getItem","itemLocal","parse","newPropValues","updatedItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fcfbfaf.chunk.js","sourcesContent":["import React, { useRef , useState } from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport \"./Input.css\";\r\nimport {FaPlus} from 'react-icons/fa'\r\n\r\nfunction Input({ action, changeCategory }) {\r\n  const inputItem = useRef(null);\r\n  const dateItem = useRef(null);\r\n  const category = useRef(null);\r\n\r\n  const getCurrentDate = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear()\r\n    let month = today.getMonth() + 1\r\n    if (month < 10) {\r\n      month = '0' + month;\r\n    }\r\n    const day = today.getDate()\r\n    return `${year}-${month}-${day}`\r\n  }\r\n\r\n  const [date, setDate] = useState(getCurrentDate)\r\n\r\n  const changeDate = (evt) => {\r\n    setDate(evt.target.value)\r\n  }\r\n\r\n\r\n  const onClick = () => {\r\n    const inputObject = {\r\n      task: inputItem.current.value,\r\n      done: false,\r\n      category: category.current.value,\r\n      id: uuid(),\r\n      memo: \"\",\r\n      date: dateItem.current.value,\r\n    };\r\n    action(inputObject);\r\n    console.log(dateItem.current.value);\r\n    inputItem.current.value = \"\";\r\n  };\r\n\r\n  const onEnter = (evt) => {\r\n    console.log(evt.code)\r\n    if (evt.code === 'Enter') {\r\n        onClick()\r\n    }  \r\n  }\r\n\r\n  const onCategoryChange = () => {\r\n    changeCategory(category.current.value);\r\n    console.log(category.current.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"input\">\r\n        <div className=\"input__inputfields\">\r\n          <div className=\"input__text-and-create\">\r\n            <input\r\n                onKeyDown={onEnter}\r\n                className=\"input__textfield\"\r\n                type=\"text\"\r\n                placeholder=\"What to do?\"\r\n                ref={inputItem}/>\r\n                \r\n\r\n            <div className=\"input__create-button\">\r\n                <button className=\"btn btn--create btn-round\" onClick={onClick} type=\"button\">\r\n                {/* <MdCreate size={20}/> */}\r\n                <FaPlus size={20}/>\r\n                </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"input__category-and-date\">\r\n           <div className=\"input__select--duedate input__select\">\r\n              <label htmlFor=\"dueDate\" className='input__label'>When?</label>\r\n              <input\r\n                value={date}\r\n                onChange={changeDate}\r\n                id='dueDate'\r\n                type=\"date\"\r\n                ref={dateItem}\r\n                className=\"due-date-select\"\r\n                min=\"2021-01-01\"\r\n                max=\"2021-12-31\">\r\n              </input>\r\n            </div>\r\n\r\n            <div className=\"input__select--category input__select\">\r\n              <label htmlFor=\"category\" className=\"input__label\">Where?</label>\r\n              <select\r\n                id=\"category\"\r\n                onChange={onCategoryChange}\r\n                className=\"category-select\"\r\n                ref={category}\r\n              >\r\n                <option value=\"Home\">Home</option>\r\n                <option value=\"Office\">Office</option>\r\n                <option value=\"Personal\">Personal</option>\r\n              </select>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React, { useRef, useState } from \"react\";\r\nimport './ToDoItem.css'\r\nimport {GiSaveArrow} from 'react-icons/gi';\r\n\r\nconst EditMode = ({ itemContent, updateItems, changeCategory, toggleEdit }) => {\r\n  // UseRefs for the Edit function\r\n  const inputItem = useRef(null);\r\n  const dateItem = useRef(null);\r\n  const category = useRef(null);\r\n\r\n  const [updatedTask, setUpdatedTask] = useState(itemContent.task);\r\n  const [updatedCategory, setUpdatedCategory] = useState(itemContent.category);\r\n  const [updatedDate, setUpdatedDate] = useState(itemContent.date)\r\n\r\n  const onTaskChange = (evt) => {\r\n    setUpdatedTask(evt.target.value);\r\n  };\r\n\r\n  const saveEdit = () => {\r\n    updateItems(itemContent.id, {\r\n      task: updatedTask,\r\n      category: updatedCategory,\r\n      date: updatedDate\r\n    });\r\n  };\r\n\r\n  const onCategoryChange = () => {\r\n    setUpdatedCategory(category.current.value);\r\n  };\r\n\r\n  const onDateChange = () => {\r\n      setUpdatedDate(dateItem.current.value)\r\n  }\r\n\r\n  const changeEditMode = () => {\r\n    saveEdit();\r\n    toggleEdit();\r\n  };\r\n\r\n  return (\r\n    <div className=\"editmode__content\">\r\n      <div className=\"editmode__text-and-buttons\">\r\n        <input\r\n          className=\"editmode__textfield\"\r\n          type=\"text\"\r\n          value={updatedTask}\r\n          ref={inputItem}\r\n          onChange={onTaskChange}\r\n        />\r\n          {/* edit the text of item */}\r\n          <GiSaveArrow size={30} className=\"editmode__button-icon\" onClick={changeEditMode}/>\r\n        {/* <div className=\"editmode__buttons\" onClick={changeEditMode}>\r\n          \r\n        </div> */}\r\n      </div>\r\n\r\n      {/* <textarea\r\n        className={memoContent.className}\r\n        onChange={changeMemo}\r\n        width=\"20\"\r\n        height=\"10\"\r\n        placeholder=\"Notes\"\r\n        value={memoText}\r\n      ></textarea> */}\r\n      <div className=\"editmode__date-category\">\r\n        {/* <p className=\"todoitem__date\">{itemContent.date}</p> */}\r\n        <input\r\n          type=\"date\"\r\n          ref={dateItem}\r\n          className=\"due-date-select\"\r\n          min=\"2021-01-01\"\r\n          max=\"2021-12-31\"\r\n          onChange={onDateChange}\r\n          value={updatedDate}\r\n        ></input>\r\n        <select\r\n          onChange={onCategoryChange}\r\n          className=\"editmode__category-select\"\r\n          ref={category}\r\n          value={updatedCategory}\r\n        >\r\n          <option value=\"fruits\">Fruits</option>\r\n          <option value=\"kitchen\">Kitchen</option>\r\n          <option value=\"vegetable\">Vegetables</option>\r\n        </select>\r\n     \r\n\r\n        {/* <p className=\"todoitem__info__category\">{itemContent.category}</p> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditMode;\r\n\r\n//   const [memoContent, setMemoState] = useState({\r\n//     className: \"memo\",\r\n//     isActive: false,\r\n//   });\r\n//   const [memoText, setMemoContent] = useState(itemContent.memo);\r\n\r\n//   const toggleMemo = () => {\r\n//     if (!memoContent.isActive) {\r\n//       setMemoState({ className: \"memo memo-active\", isActive: true });\r\n//     } else {\r\n//       setMemoState({ className: \"memo\", isActive: false });\r\n\r\n//       const newMemo = { memo: memoText };\r\n\r\n//       updateItems(itemContent.id, newMemo);\r\n//     }\r\n//   };\r\n\r\n//   // Action that changes the content of the Memo for our Item in the Main State Database\r\n//   const changeMemo = (evt) => {\r\n//     setMemoContent(evt.target.value);\r\n//   };\r\n","import React from \"react\";\r\nimport './ToDoItem.css'\r\n\r\nfunction ViewMode({ itemContent, toggleEdit }) {\r\n  return (\r\n    <div>\r\n      <div className=\"todoitem__content\" onClick={toggleEdit}>\r\n        <div className=\"todoitem__text-and-buttons\">\r\n          <p className=\"todoitem__text\">{itemContent.task}</p>\r\n          <div className=\"todoitem__buttons\">\r\n            {/* <button className=\"btn btn--edit\" >\r\n              Edit\r\n            </button> */}\r\n            {/* edit the text of item */}\r\n          </div>\r\n        </div>\r\n        {/* <textarea\r\n          className={memoContent.className}\r\n          onChange={changeMemo}\r\n          width=\"20\"\r\n          height=\"10\"\r\n          placeholder=\"Notes\"\r\n          value={memoText}\r\n        ></textarea> */}\r\n        <div className=\"todoitem__info\">\r\n          <p className=\"todoitem__date\">{itemContent.date}</p>\r\n          <p className=\"todoitem__info__category\">{itemContent.category}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewMode;\r\n","import React, { useState } from \"react\";\r\nimport EditMode from \"./EditMode\";\r\nimport \"./ToDoItem.css\";\r\nimport ViewMode from \"./ViewMode\";\r\nimport {BsTrash} from 'react-icons/bs';\r\nimport {IoMdDoneAll} from 'react-icons/io';\r\n\r\n// Edit Button: use State for toggling edit view. use State also for editing content.\r\n\r\nfunction ToDoItem({ itemContent, updateItems, onDelete, changeCategory }) {\r\n  // Text Field Button: use State to change the Status of the Memo Area by changing the className\r\n\r\n\r\n  const [editState, setEditState] = useState(false);\r\n\r\n  // After clicking the Edit button: opening up Edit Window\r\n  const toggleEdit = () => {\r\n    setEditState(!editState);\r\n  };\r\n\r\n  // done item\r\n  const toggleDone = () => {\r\n    updateItems(itemContent.id, { done: !itemContent.done });\r\n  };\r\n\r\n  const viewOrEditMode = () => {\r\n    if (editState) {\r\n      return (\r\n        <EditMode\r\n          itemContent={itemContent}\r\n          updateItems={updateItems}\r\n          changeCategory={changeCategory}\r\n          toggleEdit={toggleEdit}\r\n        />\r\n      );\r\n    } else {\r\n      return <ViewMode itemContent={itemContent} toggleEdit={toggleEdit} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todoitem\">\r\n      <div className=\"todoitem__button\">\r\n        <button className=\"btn-round btn-round--done\" onClick={toggleDone}>\r\n          <IoMdDoneAll size={20}/>\r\n        </button>\r\n        {/* cross out the item */}\r\n      </div>\r\n      {viewOrEditMode()}\r\n      <div className=\"todoitem__button\">\r\n        <button\r\n          className=\"btn-round btn-round--trash\"\r\n          onClick={() => {\r\n            onDelete(itemContent.id);\r\n          }}>\r\n          <BsTrash size={20}/>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React, { useState } from \"react\";\r\nimport ToDoItem from \"../ToDoItem/ToDoItem\";\r\nimport \"./ToDoList.css\";\r\nimport {FaChevronDown} from 'react-icons/fa'\r\n\r\nfunction ToDoList({ items, updateItems, category, onDelete, changeCategory }) {\r\n  // iterate thorugh every item and check if its category is the selected category\r\n\r\n  const [doneItems, setDoneItems] = useState('')\r\n\r\n  // doneitems have two css classes: first one is the basic one, second one has 'display: none'\r\n  const toggleDone = () => { doneItems === '' ? setDoneItems('doneItem-hidden') : setDoneItems('')};\r\n\r\n  const filteredList = items.filter((item) => item.category === category);\r\n\r\n  return (\r\n    <div className=\"to-do-list\">\r\n      <div className=\"to-do-list__items\">\r\n        <h2 className=\"to-do-list__headline\">Still <span className='title--yellow'> To Do</span></h2>\r\n        <div>\r\n        {filteredList.map((item, index) =>\r\n          item.done ? (\r\n            \"\"\r\n          ) : (\r\n            <ToDoItem\r\n              itemContent={item}\r\n              key={index}\r\n              updateItems={updateItems}\r\n              onDelete={onDelete}\r\n              changeCategory={changeCategory}\r\n            />\r\n          )\r\n        )}\r\n        </div>\r\n      </div>\r\n      <hr className=\"app__hr\" />\r\n      <div className=\"to-do-list__items\">\r\n        <h2 className=\"to-do-list__headline\" onClick={toggleDone}>Already <span className=\"title--yellow\">Done</span><br /><FaChevronDown size={20}/></h2>\r\n        <div className={doneItems}>\r\n          {filteredList.map((item, index) =>\r\n            item.done ? (\r\n              <ToDoItem\r\n                itemContent={item}\r\n                key={index}\r\n                updateItems={updateItems}\r\n                onDelete={onDelete}\r\n                changeCategory={changeCategory}\r\n              />\r\n            ) : (\r\n              \"\"\r\n            )\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ); \r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport uuid from \"react-uuid\";\r\nimport Input from \"./components/Input/Input\";\r\nimport ToDoList from \"./components/ToDoList/ToDoList\";\r\n\r\nfunction App() {\r\n  const [items, setItems] = useState([\r\n    {\r\n      id: uuid(), // this fucntion will create a unique id for every item, making it easy to select\r\n      task: \"buy bananas\",\r\n      done: false,\r\n      category: \"Home\",\r\n      memo: \"chiquitas\",\r\n    },\r\n    {\r\n      id: uuid(),\r\n      task: \"clean kitchen\",\r\n      done: true,\r\n      category: \"Personal\",\r\n      memo: \"use dirty towels\",\r\n    },\r\n  ]);\r\n\r\n  const [category, setCategory] = useState(\"Home\");\r\n\r\n  const changeCategory = (newCategory) => {\r\n    setCategory(newCategory);\r\n  };\r\n\r\n  // useEffect to run and save in the local storage\r\n  useEffect(() => {\r\n    getLocalItems();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const saveLocalItems = () => {\r\n      localStorage.setItem(\"items\", JSON.stringify(items));\r\n    };\r\n    saveLocalItems();\r\n  }, [items]);\r\n\r\n  // Function that adds completely new Items\r\n  const addNewItem = (newItem) => {\r\n    const newItemList = [...items, newItem];\r\n    setItems(newItemList);\r\n  };\r\n\r\n  // Function that can the properties of specific items (e.g. when editing)\r\n  const updateItems = (id, newPropValues) => {\r\n    const updatedItems = items.map((item) => {\r\n      if (item.id === id) {\r\n        item = { ...item, ...newPropValues };\r\n      }\r\n      return item;\r\n    });\r\n    console.log(items)\r\n    setItems(updatedItems);\r\n  };\r\n\r\n  // Function that deletes the clicked item\r\n  const deleteItem = (id) => {\r\n    setItems(items.filter((item) => item.id !== id));\r\n  };\r\n\r\n  // local storage\r\n  const getLocalItems = () => {\r\n    if (localStorage.getItem(\"items\") === null) {\r\n      localStorage.setItem(\"items\", JSON.stringify([]));\r\n    } else {\r\n      let itemLocal = JSON.parse(localStorage.getItem(\"items\"));\r\n      setItems(itemLocal);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__content\">\r\n        <h1 className=\"app__title\"><span className=\"title--yellow\">To Do</span> or not <span className=\"title--yellow\">To Do</span></h1>\r\n        <Input action={addNewItem} changeCategory={changeCategory} />\r\n        <hr className=\"app__hr\" />\r\n        <ToDoList\r\n          items={items}\r\n          action={addNewItem}\r\n          category={category}\r\n          updateItems={updateItems}\r\n          onDelete={deleteItem}\r\n          changeCategory={changeCategory}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}